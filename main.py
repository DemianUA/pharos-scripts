import random
import asyncio
import json
from eth_account import Account
from core.mint_nft import mint_nft


from config import (
    RETRIES_PER_ACTION,
    DELAY_BETWEEN_RETRIES,
    DELAY_BETWEEN_WALLETS,
    RANDOMIZE_WALLETS_ORDER
)

from core.account_loader import load_accounts, AccountContext
from core.checkin import perform_checkin, checkin_all_wallets
from core.send_tokens_async import send_phrs_to_self
from core.swap_phrs_usdc import swap_phrs_to_usdc
from core.swap_usdc_phrs import swap_usdc_to_phrs
from core.faucet import run_faucet_all_wallets
from core.stats import collect_stats
from core.generate_user_agents import generate_user_agents
from core.smartcontract_async import deploy_timer_all_wallets
from core.liquidity_async import add_liquidity_phrs_usdc
from core.all_in import run_all_in


async def retry_action(action_func, *args):
    for attempt in range(RETRIES_PER_ACTION):
        try:
            # üîÑ –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ async ‚Äî –∑–∞–ø—É—Å–∫–∞—Ç–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            if asyncio.iscoroutinefunction(action_func):
                result = await action_func(*args)
            else:
                result = await asyncio.to_thread(action_func, *args)

            if result:
                short_wallet = args[0][-8:] if args and isinstance(args[0], str) else ""
                print(f"[{short_wallet}] {result}")
            if isinstance(result, str) and "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ" in result:
                return
            if result is not False:
                return
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±–∞ {attempt + 1}/{RETRIES_PER_ACTION}")
        except Exception as e:
            print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫: {e}")
            if "TX_REPLAY_ATTACK" in str(e):
                delay = random.randint(15, 25)
                print(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ —á–µ—Ä–µ–∑ TX_REPLAY_ATTACK: {delay}—Å")
                await asyncio.sleep(delay)
                continue
        if attempt < RETRIES_PER_ACTION - 1:
            delay = random.randint(*DELAY_BETWEEN_RETRIES)
            print(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º: {delay}—Å")
            await asyncio.sleep(delay)


async def handle_account(account: AccountContext, action_id: str):
    print(f"\nüßæ –û–±—Ä–æ–±–∫–∞ –∞–∫–∞—É–Ω—Ç–∞: {account.private_key[:10]}...")

    if action_id == "1":
        await retry_action(swap_phrs_to_usdc, account.private_key, account.proxy)
    elif action_id == "2":
        await retry_action(swap_usdc_to_phrs, account.private_key, account.proxy)
    elif action_id == "3":
        await retry_action(send_phrs_to_self, account.private_key, account.proxy)
    elif action_id == "checkin":
        await retry_action(perform_checkin, account.private_key, account.proxy)
    else:
        print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")


async def main():
    while True:
        print("\n=== –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===")
        print("1. üî• ALL IN ")
        print("2. ‚öôÔ∏è –û–∫—Ä–µ–º—ñ –æ–Ω—á–µ–π–Ω –¥—ñ—ó")
        print("3. ‚úÖ Check-in")
        print("4. üö∞ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏ –∑ –∫—Ä–∞–Ω–∞")
        print("5. üìä –ó—ñ–±—Ä–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("6. üß™ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ user-agent'–∏")
        print("0. üö™ –í–∏–π—Ç–∏")

        choice = input("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ")

        if choice == "0":
            print("üëã –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
            break

        elif choice == "1":
            accounts = load_accounts()
            await run_all_in(accounts)
            continue

        elif choice == "2":
            while True:
                print("\nüîß –û–Ω—á–µ–π–Ω –¥—ñ—ó:")
                print("1. üîÅ –°–≤–∞–ø PHRS ‚Üí USDC")
                print("2. üîÅ –°–≤–∞–ø USDC ‚Üí PHRS")
                print("3. üí∏ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ PHRS —Å–∞–º–æ–º—É —Å–æ–±—ñ")
                print("4. üß± –î–µ–ø–ª–æ–π —Å–º–∞—Ä—Ç–∫–æ–Ω—Ç—Ä–∞–∫—Ç—É Timer")
                print("5. üíß –î–æ–¥–∞—Ç–∏ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —É –ø—É–ª PHRS-USDC")
                print("6. üñºÔ∏è –ú—ñ–Ω—Ç NFT")
                print("0. üîô –ù–∞–∑–∞–¥")
                sub_choice = input("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ")

                if sub_choice == "0":
                    break

                accounts = load_accounts()
                if RANDOMIZE_WALLETS_ORDER:
                    random.shuffle(accounts)

                for acc in accounts:
                    if sub_choice in ["1", "2", "3"]:
                        await handle_account(acc, sub_choice)
                    elif sub_choice == "4":
                        await deploy_timer_all_wallets()
                        break
                    elif sub_choice == "5":
                        await retry_action(add_liquidity_phrs_usdc, acc.private_key, acc.proxy)
                    elif sub_choice == "6":
                        await retry_action(mint_nft, acc.private_key, acc.proxy)

                    delay = random.randint(*DELAY_BETWEEN_WALLETS)
                    print(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏: {delay}—Å")
                    await asyncio.sleep(delay)

        elif choice == "3":
            accounts = load_accounts()
            if RANDOMIZE_WALLETS_ORDER:
                random.shuffle(accounts)
            for acc in accounts:
                await handle_account(acc, "checkin")
                delay = random.randint(*DELAY_BETWEEN_WALLETS)
                print(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏: {delay}—Å")
                await asyncio.sleep(delay)

        elif choice == "4":
            run_faucet_all_wallets()

        elif choice == "5":
            collect_stats()

        elif choice == "6":
            generate_user_agents()

        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –æ–ø—Ü—ñ—è")


if __name__ == "__main__":
    asyncio.run(main())
